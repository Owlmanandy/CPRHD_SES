import numpy as np
import time
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import GridSearchCV, train_test_split
from sklearn.metrics import log_loss, roc_auc_score
import pickle
from sklearn.utils import class_weight

"""
This code performs cross validation on the RF model generated by
Hal_RF_model_fit.py
"""

model_RF_best_2 = pickle.load(open('/home/jallen17/CPRHD_SES/RF_model_fit', 'rb'))

time_start = time.time()
data = pd.read_sas('/home/shared/cprhd/DATA_CPRHD_SES/wnv_2245new.sas7bdat')  # In the Cook_Dupage Directory
print("Data read in:", time.time() - time_start)

time_start = time.time()
x = data.drop(columns=['yrweeks', 'yrwksfid', 'yr_hexid', 'year', 'income1','hexid','PopYesNo'])
x_small = x[(x.weeks >= 22) & (x.weeks <= 31)]
columns = ['tempc', 'preci', 'templag1', 'templag2', 'templag3', 'templag4',
       'precilag1', 'precilag2', 'precilag3', 'precilag4', 'mirmean',
       'mirlag1', 'mirlag2', 'mirlag3', 'mirlag4', 'totpop', 'whitepct',
       'blackpct', 'asianpct', 'Income', 'dlipct', 'dmipct', 'dhipct',
       'Jantemp', 'hpctpreww', 'hpctpostww', 'hpct7089', 'hpctpost90']
x_selected = x_small[columns].values
y_selected = x_small['wnvbinary'].values
print("Data selected in:", time.time() - time_start)
time_start = time.time()
trainX_sel, testX_sel, trainY_sel, testY_sel = train_test_split(x_selected, y_selected, test_size=0.2, random_state=1) # CV
print("data split:", time.time() - time_start)

time_start = time.time()

param_grid = {
    'min_samples_split': [2,3,4],
    'bootstrap': [True],
    'max_depth': [50,60,70],
    'min_samples_leaf': [10,15,20],
    'n_estimators': [1100,1300,1500]
} 


CV_model_RF_3 = GridSearchCV(model_RF_best_2, param_grid, scoring='neg_log_loss', cv=5)
print("CV model parameterized:", time.time() - time_start)

time_start = time.time()
CV_model_RF_3.fit(trainX_sel, trainY_sel)
print("CV model fit:", time.time() - time_start)

pickle.dump(CV_model_RF_3, open('RF_model_CV_final', 'wb'))

def model_RF_test(model_RF, dataX, dataY):
    print("Model performance")
    predict_data = model_RF.predict_proba(dataX)

    # Some stats
    print("Feature Importance : ")
    print(model_RF.best_estimator_.feature_importances_)
    print("Total number of WNV occurrence in test set : " + str(len(dataY[dataY > 0])))
    
    print("Number of WNV occurrence the model is able to capture in test set:" + str(
        dataY[np.where(predict_data[:, 1] > 0)].sum()))
    print('model best parameters')
    print(model_RF.get_params)
    print("Log loss : " + str(log_loss(dataY, predict_data)))

    print("AUC: " + str(roc_auc_score(dataY, predict_data[:,1])))

    print(
        "This is to test the performance of random forest model, ideally, the logloss is low and also it is able to "
        "capture most of the WNV occurrence")

    return None  # Check how many wnv it predicts

model_RF_test(CV_model_RF_3,testX_sel,testY_sel)
